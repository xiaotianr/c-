#include "pch.h"
#include <iostream>
#include <mutex>
using namespace std;

/*
??????????????????????¦Æ????????????????????????????
A *p1 = new A();
A *p2 = new A();
A *p3 = new A(); 

?????????????????ï…????????

????????
?????????????????§Ý??????????????????????????
?????????????¦·?????????????????¦Ë?????????????
*/
#if 0
// ?????????????????? https://blog.csdn.net/QIANGWEIYUAN
class Singleton
{
public:
	static Singleton* getInstance() // #3 ??????¦·??????????????
	{
		// g++ -o run ??????.cpp -g   gdb run
		// ????????????????????????????????????????????????????
		static Singleton instance; // #2 ???????¦·?????????????
		return &instance;
	}
private:
	Singleton() // #1 ????????§Ý?
	{
		// ????????????
	}
	Singleton(const Singleton&) = delete;
	Singleton& operator=(const Singleton&) = delete;
};

int main()
{
	Singleton *p1 = Singleton::getInstance();
	Singleton *p2 = Singleton::getInstance();
	Singleton *p3 = Singleton::getInstance();

	return 0;
}
#endif



#if 0
std::mutex mtx;

// ??????????? => ???????????????   => ??????????????????
class Singleton
{
public:
	// ???????????????   ??+????§Ø?
	static Singleton* getInstance() // #3 ??????¦·??????????????
	{
		//lock_guard<std::mutex> guard(mtx); // ?????????????
		if (instance == nullptr)
		{
			lock_guard<std::mutex> guard(mtx);
			if (instance == nullptr)
			{
				/*
				???????
				??instance???
				???????
				*/
				instance = new Singleton();
			}
		}
		return instance;
	}
private:
	static Singleton *volatile instance; // #2 ???????¦·?????????????
	Singleton() // #1 ????????§Ý?
	{

	}
	Singleton(const Singleton&) = delete;
	Singleton& operator=(const Singleton&) = delete;
};
Singleton*volatile Singleton::instance = nullptr;

int main()
{
	Singleton *p1 = Singleton::getInstance();
	Singleton *p2 = Singleton::getInstance();
	Singleton *p3 = Singleton::getInstance();

	return 0;
}
#endif

#if 0
// ??????????? ????????????
class Singleton
{
public:
	static Singleton* getInstance() // #3 ??????¦·??????????????
	{
		return &instance;
	}
private:
	static Singleton instance; // #2 ???????¦·?????????????
	Singleton() // #1 ????????§Ý?
	{

	}
	Singleton(const Singleton&) = delete;
	Singleton& operator=(const Singleton&) = delete;
};
Singleton Singleton::instance;

int main()
{
	//Singleton *p1 = Singleton::getInstance();
	//Singleton *p2 = Singleton::getInstance();
	//Singleton *p3 = Singleton::getInstance();

	return 0;
}
#endif